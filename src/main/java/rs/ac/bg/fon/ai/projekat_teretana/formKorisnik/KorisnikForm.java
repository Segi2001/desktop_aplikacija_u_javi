/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package rs.ac.bg.fon.ai.projekat_teretana.formKorisnik;

import static com.google.protobuf.JavaFeaturesProto.java;
import java.awt.Point;
import java.io.IOException;
import rs.ac.bg.fon.ai.projekat_teretana.controller.ClientController;
import rs.ac.bg.fon.ai.projekat_teretana.domain.Grad;
import rs.ac.bg.fon.ai.projekat_teretana.domain.Korisnik;
import rs.ac.bg.fon.ai.projekat_teretana.domain.TipTreninga;
import rs.ac.bg.fon.ai.projekat_teretana.formKorisnik.constants.MyConstantsKorisnik;
import rs.ac.bg.fon.ai.projekat_teretana.models.ModelTabeleTipovi;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import rs.ac.bg.fon.ai.projekat_teretana.json.JsonUtils;

/**
 *
 * @author Stefan Segrt
 */
public class KorisnikForm extends javax.swing.JDialog {

    private int mode;
    private Korisnik k;
    TipTreninga tip;

    /**
     * Creates new form KorisnikForm
     */
    public KorisnikForm(java.awt.Frame parent, boolean modal, int mode) {
        super(parent, modal);
        initComponents();
        this.mode = mode;
        prepareForm();
        try {
            popuniTipove();
            popuniComboBoxGrad();
        } catch (Exception e) {
            if (e instanceof IOException) {
                JOptionPane.showMessageDialog(this, "GRESKA,POKUSAJTE KASNIJE!!!!!");
                System.exit(0);
            }
        }
        List<TipTreninga> tipovi = new ArrayList<>();
        ModelTabeleTipovi mtt = new ModelTabeleTipovi(tipovi);
        tblKorisnickiTipovi.setModel(mtt);

    }

    public KorisnikForm(java.awt.Dialog parent, boolean modal, int mode, Korisnik k) {

        super(parent, modal);
        initComponents();
        this.mode = mode;
        prepareForm();
        try {
            popuniTipove();
            for (TipTreninga tipTreninga : k.getTipovi()) {
                cmbTipovi.removeItem(tipTreninga);
            }
        } catch (Exception e) {
            if (e instanceof IOException) {
                JOptionPane.showMessageDialog(this, "GRESKA,POKUSAJTE KASNIJE!!!!!");
                System.exit(0);
            }
        }
        this.k = k;
        List<TipTreninga> tipovi = this.k.getTipovi();
        ModelTabeleTipovi mtt = new ModelTabeleTipovi(tipovi);
        tblKorisnickiTipovi.setModel(mtt);
        txtIme.setText(k.getIme());
        txtPrezime.setText(k.getPrezime());
        txtKontakt.setText(k.getKontakt());
        txtAdresa.setText(k.getAdresa());
        SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
        txtDatumRodj.setText(sdf.format(k.getDatumRodjenja()));
        cmbGrad.getModel().setSelectedItem(k.getGrad());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtIme = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtPrezime = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDatumRodj = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtAdresa = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtKontakt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        cmbGrad = new javax.swing.JComboBox<>();
        lblTip = new javax.swing.JLabel();
        cmbTipovi = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblKorisnickiTipovi = new javax.swing.JTable();
        btnDodajTip = new javax.swing.JButton();
        btnSacuvaj = new javax.swing.JButton();
        btnObrisiTip = new javax.swing.JButton();
        btnIzmeni = new javax.swing.JButton();
        btnOtkazi = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Ime:");

        jLabel2.setText("Prezime:");

        jLabel3.setText("Datum rodjenja:");

        jLabel4.setText("Adresa:");

        jLabel5.setText("Kontakt:");

        jLabel6.setText("Grad:");

        lblTip.setText("Izaberite tipove:");

        tblKorisnickiTipovi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblKorisnickiTipovi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblKorisnickiTipoviMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblKorisnickiTipovi);

        btnDodajTip.setText("Dodaj Tip");
        btnDodajTip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajTipActionPerformed(evt);
            }
        });

        btnSacuvaj.setText("Sacuvaj");
        btnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajActionPerformed(evt);
            }
        });

        btnObrisiTip.setText("Obrisi Tip");
        btnObrisiTip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiTipActionPerformed(evt);
            }
        });

        btnIzmeni.setText("Izmeni");
        btnIzmeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniActionPerformed(evt);
            }
        });

        btnOtkazi.setText("Otkazi");

        jLabel7.setText("Ukoliko zelite vise detalja o polju opis, kliknite na njega");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(btnSacuvaj))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnIzmeni)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnOtkazi)
                                .addGap(27, 27, 27))
                            .addComponent(cmbGrad, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtIme)
                            .addComponent(txtPrezime)
                            .addComponent(txtDatumRodj, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAdresa, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtKontakt, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(lblTip)
                        .addGap(27, 27, 27)
                        .addComponent(cmbTipovi, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel7)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnObrisiTip)
                    .addComponent(btnDodajTip))
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtIme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPrezime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDatumRodj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtAdresa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtKontakt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cmbGrad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTip)
                            .addComponent(cmbTipovi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnDodajTip)
                                .addGap(18, 18, 18)
                                .addComponent(btnObrisiTip)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(80, 80, 80))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSacuvaj)
                    .addComponent(btnOtkazi)
                    .addComponent(btnIzmeni))
                .addGap(63, 63, 63))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajActionPerformed

        try {
//            if (txtIme.getText().isEmpty() || txtPrezime.getText().isEmpty() || txtKontakt.getText().isEmpty()
//                    || txtAdresa.getText().isEmpty() || txtKontakt.getText().isEmpty()
//                    || cmbGrad.getSelectedIndex() == -1) {
//                JOptionPane.showMessageDialog(this, "Polja korisnika moraju biti popunjena!!!");
//                return;
//            }
            String ime = txtIme.getText();
            String prezime = txtPrezime.getText();
            String adresa = txtAdresa.getText();
            String kontakt = txtKontakt.getText();
            Grad grad = (Grad) cmbGrad.getSelectedItem();

            String datumRodjenjaSTR = txtDatumRodj.getText();
            java.sql.Date datumRodjenjaSQL = validateDatum(datumRodjenjaSTR);
            System.out.println(datumRodjenjaSQL);
            ModelTabeleTipovi mtt = (ModelTabeleTipovi) tblKorisnickiTipovi.getModel();
            List<TipTreninga> tipovi = mtt.getTipovi();

            String porukaZaPrazno = "";
            int brojac = 0;
            if (ime.isEmpty() || prezime.isEmpty() || txtDatumRodj.getText().isEmpty() || adresa.isEmpty()
                    || kontakt.isEmpty() || grad == null || tipovi.isEmpty()) {

                if (ime.isEmpty()) {
                    porukaZaPrazno += "ime, ";
                    brojac++;
                }
                if (prezime.isEmpty()) {
                    porukaZaPrazno += "prezime, ";
                    brojac++;
                }
                if (datumRodjenjaSTR.isEmpty()) {
                    porukaZaPrazno += "datum rodjenja, ";
                    brojac++;
                }
                if (adresa.isEmpty()) {
                    porukaZaPrazno += "adresa, ";
                    brojac++;
                }
                if (kontakt.isEmpty()) {
                    porukaZaPrazno += "kontakt, ";
                    brojac++;
                }
                if (grad == null) {
                    porukaZaPrazno += "grad, ";
                    brojac++;
                }
                if (tipovi.isEmpty()) {
                    porukaZaPrazno += "tipovi ";
                    brojac++;
                }
                if (brojac == 1) {
                    porukaZaPrazno = "Polje " + porukaZaPrazno + " nije popunjeno";
                    JOptionPane.showMessageDialog(this, porukaZaPrazno);
                    return;
                }
                JOptionPane.showMessageDialog(this, "Polja " + porukaZaPrazno + " nisu popunjena!!");
                return;
            }

            brojac = 0;
            String porukaZaValidaciju = "";

            if (!validateIme(ime)) {
                porukaZaValidaciju += "ime, ";
                brojac++;
            }
            if (!validatePrezime(prezime)) {
                porukaZaValidaciju += "prezime, ";
                brojac++;
            }
            if (!validateKontakt(kontakt)) {
                porukaZaValidaciju += "kontakt, ";
                brojac++;
            }
            if (datumRodjenjaSQL == null) {
                porukaZaValidaciju += "datum rodjenja, ";
                brojac++;
            }
            if (brojac == 1 && porukaZaValidaciju.contains("kontakt")) {
                JOptionPane.showMessageDialog(this, "Polje " + porukaZaValidaciju + " nije u dobrom formatu. "
                        + "Ocekivani format za kontakt telefon je '06X XXX XXXX' ,duzine 9 ili 10 cfiara.");
                return;

            }
            if (brojac == 1 && porukaZaValidaciju.contains("datum rodjenja")) {
                JOptionPane.showMessageDialog(this, "Polje " + porukaZaValidaciju + " nije u dobrom formatu. "
                        + "Ocekivani format za datum je 'dd.mm.YYYY' i datum mora biti neki trenutak u proslosti.");
                return;
            }
            if (brojac == 1) {
                JOptionPane.showMessageDialog(this, "Polje " + porukaZaValidaciju + " nije u dobrom formatu.");

                return;
            }

            if (porukaZaValidaciju.contains("kontakt") && !porukaZaValidaciju.contains("datum rodjenja")) {
                JOptionPane.showMessageDialog(this, "Polja " + porukaZaValidaciju + "nisu u dobrom formatu."
                        + "Ocekivani format za kontakt telefon je '06X XXX XXXX' ,duzine 9 ili 10 cfiara.");
                return;
            }
            if (!porukaZaValidaciju.contains("kontakt") && porukaZaValidaciju.contains("datum rodjenja")) {
                JOptionPane.showMessageDialog(this, "Polja " + porukaZaValidaciju + "nisu u dobrom formatu."
                        + "Ocekivani format za datum je 'dd.mm.YYYY' i datum mora biti neki trenutak u proslosti.");
                return;
            }
            if (porukaZaValidaciju.contains("ime") && porukaZaValidaciju.contains("prezime")
                    && !porukaZaValidaciju.contains("kontakt") && !porukaZaValidaciju.contains("datum rodjenja")) {
                JOptionPane.showMessageDialog(this, "Polja " + porukaZaValidaciju + "nisu u dobrom formatu.");
                return;
            }
            if (porukaZaValidaciju.contains("kontakt") && porukaZaValidaciju.contains("datum rodjenja")) {
                JOptionPane.showMessageDialog(this, "Polja " + porukaZaValidaciju + "nisu u dobrom formatu."
                        + "Ocekivani format za kontakt telefon je '06X XXX XXXX' ,duzine 9 ili 10 cfiara. "
                        + "Ocekivani format za datum je 'dd.mm.YYYY' i datum mora biti neki trenutak u proslosti.");
                return;
            }

            Korisnik korisnik = new Korisnik(0, ime, prezime, datumRodjenjaSQL, adresa, kontakt, grad,
                    tipovi);

            int id = ClientController.getInstance().addKorisnik(korisnik);
            JOptionPane.showMessageDialog(this, "Sistem je kreirao korisnika");
            List<TipTreninga> praznaListaTipova = mtt.isprazniTabelu();
            mtt = new ModelTabeleTipovi(praznaListaTipova);
            tblKorisnickiTipovi.setModel(mtt);
            refresujFormu();

            korisnik.setIdKorisnika(id);

            korisnik.setIdKorisnika(id);
            String filePath = "src/main/resources/file.json";
            JsonUtils.UpisiUJSONSaNazivomKlase(filePath, korisnik, "Naziv klase: ", "Korisnik");

        } catch (Exception ex) {
            if (ex instanceof IOException) {
                JOptionPane.showMessageDialog(this, "GRESKA,POKUSAJTE KASNIJE!!!!!");
                System.exit(0);;

            }
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_btnSacuvajActionPerformed

    private void btnDodajTipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajTipActionPerformed

        tip = (TipTreninga) cmbTipovi.getSelectedItem();
        ModelTabeleTipovi mtt = (ModelTabeleTipovi) tblKorisnickiTipovi.getModel();
        List<TipTreninga> tipovi = mtt.getTipovi();

        mtt.addTip(tip);
        cmbTipovi.removeItem(tip);
    }//GEN-LAST:event_btnDodajTipActionPerformed

    private void tblKorisnickiTipoviMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblKorisnickiTipoviMouseClicked

        JTable tabela = (JTable) evt.getSource();
        Point point = evt.getPoint();
        int red = tabela.rowAtPoint(point);
        int kolona = tabela.columnAtPoint(point);

        ModelTabeleTipovi mtp = (ModelTabeleTipovi) tblKorisnickiTipovi.getModel();
        if (mtp.getKolone()[kolona].equals("Opis")) {

            String text = mtp.getTipovi().get(red).getOpis();
            JOptionPane.showMessageDialog(this, text);
        }
    }//GEN-LAST:event_tblKorisnickiTipoviMouseClicked

    private void btnObrisiTipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiTipActionPerformed

        int selektovaniRed = tblKorisnickiTipovi.getSelectedRow();
        if (selektovaniRed == -1) {
            JOptionPane.showMessageDialog(this, "Morate selektovati neki red");
            return;
        }

        ModelTabeleTipovi mtt = (ModelTabeleTipovi) tblKorisnickiTipovi.getModel();
        TipTreninga tip = mtt.getTipovi().get(selektovaniRed);
        mtt.deleteTip(tip);
        cmbTipovi.addItem(tip);


    }//GEN-LAST:event_btnObrisiTipActionPerformed

    private void btnIzmeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniActionPerformed

        try {
            String adresa = txtAdresa.getText();
            String kontakt = txtKontakt.getText();
            ModelTabeleTipovi mtt = (ModelTabeleTipovi) tblKorisnickiTipovi.getModel();
            List<TipTreninga> tipovi = mtt.getTipovi();

            String porukaZaPrazno = "";
            int brojac = 0;
            if (adresa.isEmpty() || kontakt.isEmpty() || tipovi.isEmpty()) {

                if (adresa.isEmpty()) {
                    porukaZaPrazno += "adresa, ";
                    brojac++;
                }
                if (kontakt.isEmpty()) {
                    porukaZaPrazno += "kontakt, ";
                    brojac++;
                }

                if (tipovi.isEmpty()) {
                    porukaZaPrazno += "tipovi ";
                    brojac++;
                }
                if (brojac == 1) {
                    porukaZaPrazno = "Polje " + porukaZaPrazno + " nije popunjeno";
                    JOptionPane.showMessageDialog(this, porukaZaPrazno);
                    return;
                }
                JOptionPane.showMessageDialog(this, "Polja " + porukaZaPrazno + " nisu popunjena!!");
                return;
            }

            if (!validateKontakt(kontakt)) {
                JOptionPane.showMessageDialog(this, "Polje kontakt nije u dobrom formatu. "
                        + "Ocekivani format za kontakt telefon je '06X XXX XXXX' ,duzine 9 ili 10 cfiara. ");
                return;
            }

            k.setAdresa(adresa);
            k.setKontakt(kontakt);
            k.setTipovi(tipovi);

            ClientController.getInstance().updateKorisnik(k);
            FormPretraziKorisnike fpk = (FormPretraziKorisnike) getParent();
            fpk.refreshForm();
            JOptionPane.showMessageDialog(this,
                    "Sistem je zapamtio korisnika");

            this.dispose();

        } catch (Exception ex) {
            if (ex instanceof IOException) {
                JOptionPane.showMessageDialog(this, "GRESKA,POKUSAJTE KASNIJE!!!!!");
                System.exit(0);

            }
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }


    }//GEN-LAST:event_btnIzmeniActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(KorisnikForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(KorisnikForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(KorisnikForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(KorisnikForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new KorisnikForm().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodajTip;
    private javax.swing.JButton btnIzmeni;
    private javax.swing.JButton btnObrisiTip;
    private javax.swing.JButton btnOtkazi;
    private javax.swing.JButton btnSacuvaj;
    private javax.swing.JComboBox<Grad> cmbGrad;
    private javax.swing.JComboBox<TipTreninga> cmbTipovi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblTip;
    private javax.swing.JTable tblKorisnickiTipovi;
    private javax.swing.JTextField txtAdresa;
    private javax.swing.JTextField txtDatumRodj;
    private javax.swing.JTextField txtIme;
    private javax.swing.JTextField txtKontakt;
    private javax.swing.JTextField txtPrezime;
    // End of variables declaration//GEN-END:variables

    private void prepareForm() {

        switch (mode) {

            case MyConstantsKorisnik.DODAJ_KORISNIKA:
                btnIzmeni.setVisible(false);
                setLocationRelativeTo(null);
                break;
            case MyConstantsKorisnik.DETALJI:
                txtIme.setEnabled(false);
                txtPrezime.setEnabled(false);
                txtKontakt.setEnabled(false);
                txtDatumRodj.setEnabled(false);
                txtAdresa.setEnabled(false);
                btnSacuvaj.setVisible(false);
                btnIzmeni.setVisible(false);
                cmbTipovi.setVisible(false);
                cmbGrad.setEnabled(false);
                tblKorisnickiTipovi.setEnabled(false);
                btnDodajTip.setVisible(false);
                btnObrisiTip.setVisible(false);
                btnOtkazi.setVisible(false);
                lblTip.setVisible(false);
                setLocationRelativeTo(null);

                break;
            case MyConstantsKorisnik.IZMENA_PODATAKA_KORISNIKA:
                btnSacuvaj.setVisible(false);
                txtIme.setEnabled(false);
                txtPrezime.setEnabled(false);
                cmbGrad.setEnabled(false);
                txtDatumRodj.setEnabled(false);

                setLocationRelativeTo(null);
                break;
        }
    }

    private void popuniTipove() throws Exception {

        List<TipTreninga> tipovi = ClientController.getInstance().getListTip();
        for (TipTreninga tipTreninga : tipovi) {
            cmbTipovi.addItem(tipTreninga);
        }
        cmbTipovi.setSelectedIndex(-1);

    }

    private void popuniComboBoxGrad() throws Exception {

        List<Grad> gradovi = ClientController.getInstance().getListGrad();
        for (Grad grad : gradovi) {
            cmbGrad.addItem(grad);
        }
        cmbGrad.setSelectedIndex(-1);

    }

    private void refresujFormu() {

        txtIme.setText("");
        txtPrezime.setText("");
        txtDatumRodj.setText("");
        txtKontakt.setText("");
        txtAdresa.setText("");
        cmbGrad.setSelectedIndex(-1);
        cmbTipovi.setSelectedIndex(-1);

    }

    private boolean validateIme(String ime) {

        if (!ime.matches("[a-zA-Z]+") || !Character.isUpperCase(ime.charAt(0))) {
            return false;
        }
        return true;
    }

    private boolean validatePrezime(String prezime) {

        if (!prezime.matches("[a-zA-Z]+") || !Character.isUpperCase(prezime.charAt(0))) {
            return false;
        }
        return true;

    }

    private boolean validateKontakt(String kontakt) {

        if (!kontakt.matches("[\\d]+") || !kontakt.startsWith("06")
                || (kontakt.length() != 9 && kontakt.length() != 10)) {
            return false;
        }
        return true;
    }

    private java.sql.Date validateDatum(String datumStr) {

        Date datum;
        SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
        try {
            datum = sdf.parse(datumStr);
        } catch (ParseException pe) {
            return null;
        }
        if (datum.after(new Date()) || datumStr.length() != sdf.format(datum).length()) {
            return null;
        }
        java.sql.Date datumSql = new java.sql.Date(datum.getTime());
        return datumSql;
    }
}
