/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package rs.ac.bg.fon.ai.projekat_teretana.formTrening;

import java.io.IOException;
import rs.ac.bg.fon.ai.projekat_teretana.controller.ClientController;
import rs.ac.bg.fon.ai.projekat_teretana.domain.TipTreninga;
import rs.ac.bg.fon.ai.projekat_teretana.domain.Trener;
import rs.ac.bg.fon.ai.projekat_teretana.domain.Trening;
import rs.ac.bg.fon.ai.projekat_teretana.formTrening.constants.MyConstantsTrening;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import rs.ac.bg.fon.ai.projekat_teretana.json.JsonUtils;

/**
 *
 * @author Stefan Segrt
 */
public class TreningForm extends javax.swing.JDialog {

    private int mode;
    private Trening trening;
    FormPretraziTreninge mf;

    /**
     * Creates new form DodajTrening
     */
    public TreningForm(java.awt.Frame parent, boolean modal, int mode) {
        super(parent, modal);
        initComponents();
        this.mode = mode;
        prepareForm();
        try {
            popuniComboBoxTip();
            popuniComboBoxTrener();
        } catch (Exception e) {
            if (e instanceof IOException) {
                JOptionPane.showMessageDialog(this, "GRESKA,POKUSAJTE KASNIJE!!!!!");

                System.exit(0);
            }
        }
    }

    public TreningForm(java.awt.Dialog parent, boolean modal, int mode, Trening trening) {

        super(parent, modal);
        initComponents();
        this.mode = mode;
        ///main=(FormPretraziTreninge) parent;
        mf = (FormPretraziTreninge) parent;
        prepareForm();
        try {
            popuniComboBoxTip();
            popuniComboBoxTrener();
        } catch (Exception e) {
            if (e instanceof IOException) {
                JOptionPane.showMessageDialog(this, "GRESKA,POKUSAJTE KASNIJE!!!!!");

                System.exit(0);
            }
        }
        this.trening = trening;
        cmbTip.getModel().setSelectedItem(trening.getTip());
        cmbTrener.getModel().setSelectedItem(trening.getTrener());
        //cmbTip.setSelectedIndex(trening.getTip().getIdTipa() - 1);
        //cmbTrener.setSelectedIndex(trening.getTrener().getIdTrenera() - 1);
        System.out.println(trening.getTip());
        System.out.println(trening.getTrener());
        txtCena.setText(String.valueOf(trening.getCena()));
        txtTrajanje.setText(String.valueOf(trening.getTrajanjeUMin()));
        SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
        txtDatum.setText(sdf.format(trening.getDatumTreninga()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbTip = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        cmbTrener = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        txtCena = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtDatum = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtTrajanje = new javax.swing.JTextField();
        btnDodaj = new javax.swing.JButton();
        btnIzmeni = new javax.swing.JButton();
        btnObrisi = new javax.swing.JButton();
        btnOtkazi = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel2.setText("Izaberite tip:");

        jLabel3.setText("Izaberite trenera:");

        jLabel4.setText("Cena:");

        jLabel5.setText("Datum:");

        jLabel6.setText("Trajanje treninga:");

        btnDodaj.setText("Dodaj");
        btnDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajActionPerformed(evt);
            }
        });

        btnIzmeni.setText("Izmeni");
        btnIzmeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniActionPerformed(evt);
            }
        });

        btnObrisi.setText("Obrisi");
        btnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiActionPerformed(evt);
            }
        });

        btnOtkazi.setText("Otkazi");
        btnOtkazi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOtkaziActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(btnDodaj))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTrajanje, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbTrener, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbTip, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCena, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDatum, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(btnIzmeni)
                        .addGap(36, 36, 36)
                        .addComponent(btnObrisi)
                        .addGap(31, 31, 31)
                        .addComponent(btnOtkazi)))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(cmbTrener, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(txtCena, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtTrajanje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(cmbTip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDodaj)
                    .addComponent(btnIzmeni)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnObrisi)
                        .addComponent(btnOtkazi)))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDodajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajActionPerformed

        try {

            TipTreninga tip = (TipTreninga) cmbTip.getSelectedItem();
            Trener trener = (Trener) cmbTrener.getSelectedItem();
            int cena = 0;
            int trajanjeUMin = 0;

            String datumTreningaSTR = txtDatum.getText();

            String porukaZaPrazno = "";
            int brojac = 0;
            if (tip == null || trener == null || txtCena.getText().isEmpty() || txtDatum.getText().isEmpty() || txtTrajanje.getText().isEmpty()) {

                if (tip == null) {
                    porukaZaPrazno += "tip, ";
                    brojac++;
                }
                if (trener == null) {
                    porukaZaPrazno += "trener, ";
                    brojac++;
                }
                if (txtCena.getText().isEmpty()) {
                    porukaZaPrazno += "cena, ";
                    brojac++;
                }
                if (txtDatum.getText().isEmpty()) {
                    porukaZaPrazno += "datum treninga, ";
                    brojac++;
                }
                if (txtTrajanje.getText().isEmpty()) {
                    porukaZaPrazno += "trajanje treninga";
                    brojac++;
                }
                if (brojac == 1) {
                    porukaZaPrazno = "Polje " + porukaZaPrazno + " nije popunjeno";
                    JOptionPane.showMessageDialog(this, porukaZaPrazno);
                    return;
                }
                JOptionPane.showMessageDialog(this, "Polja " + porukaZaPrazno + " nisu popunjena!!");
                return;
            }
            brojac = 0;
            cena = validateCena(txtCena.getText());
            trajanjeUMin = validateTrajanje(txtTrajanje.getText());
            System.out.println(cena);
            System.out.println(trajanjeUMin);
            java.sql.Date datumTreningaSQL = validateDatum(datumTreningaSTR);
            String porukaZaValidaciju = "";

            if (cena == 0) {
                porukaZaValidaciju += "cena, ";
                brojac++;
            }
            if (trajanjeUMin == 0) {
                porukaZaValidaciju += "trajanje treninga, ";
                brojac++;
            }
            if (datumTreningaSQL == null) {
                porukaZaValidaciju += "datum treninga ";
                brojac++;
            }
            if (brojac == 1 && porukaZaValidaciju.contains("datum treninga")) {
                JOptionPane.showMessageDialog(this, "Polje " + porukaZaValidaciju + " nije u dobrom formatu. "
                        + "Ocekivani format za datum je 'dd.mm.YYYY' i datum mora biti neki trenutak u proslosti.");
                return;
            }
            if (brojac == 1) {
                JOptionPane.showMessageDialog(this, "Polje " + porukaZaValidaciju + " nije u dobrom formatu");
                return;
            }
            if (porukaZaValidaciju.contains("datum treninga")) {
                JOptionPane.showMessageDialog(this, "Polja " + porukaZaValidaciju + " nisu u dobrom formatu. "
                        + "Ocekivani format za datum je 'dd.mm.YYYY' i datum mora biti neki trenutak u proslosti.");
                return;
            }
            if (!porukaZaValidaciju.contains("datum treninga") && (porukaZaValidaciju.contains("ime")
                    || porukaZaValidaciju.contains("prezime") || porukaZaValidaciju.contains("cena")
                    || porukaZaValidaciju.contains("trajanje treninga"))) {
                JOptionPane.showMessageDialog(this, "Polja " + porukaZaValidaciju + " nisu u dobrom formatu. ");
                return;
            }

            Trening trening = new Trening(0, cena, datumTreningaSQL, trajanjeUMin, tip, trener);
            int id = ClientController.getInstance().addTrening(trening);
            JOptionPane.showMessageDialog(this, "Sistem je kreirao trening");
            cmbTip.setSelectedIndex(-1);
            cmbTrener.setSelectedIndex(-1);
            txtCena.setText("");
            txtDatum.setText("");
            txtTrajanje.setText("");

            trening.setIdTreninga(id);

            String filePath = "src/main/resources/file.json";
            JsonUtils.UpisiUJSONSaNazivomKlase(filePath, trening, "Naziv klase: ", "Trening");

        } catch (Exception ex) {

            if (ex instanceof IOException) {
                JOptionPane.showMessageDialog(this, "GRESKA,POKUSAJTE KASNIJE!!!!!");
                System.exit(0);

            }
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, ex.getMessage());

        }


    }//GEN-LAST:event_btnDodajActionPerformed

    private void btnIzmeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniActionPerformed

        try {
//            if (txtTrajanje.getText().isEmpty()) {
//                JOptionPane.showMessageDialog(this, "Polje za trajanje treninga ne sme biti prazno");
//                return;
//            }

            Trener trener = (Trener) cmbTrener.getSelectedItem();

            int trajanjeUMin = validateTrajanje(txtTrajanje.getText());
            String porukaZaPrazno = "";
            int brojac = 0;

            if (trener == null || txtTrajanje.getText().isEmpty()) {

                if (trener == null) {
                    porukaZaPrazno += "trener, ";
                    brojac++;
                }
                if (txtTrajanje.getText().isEmpty()) {
                    porukaZaPrazno += "trajanje treninga ";
                    brojac++;
                }
                if (brojac == 1) {
                    porukaZaPrazno = "Polje " + porukaZaPrazno + " nije popunjeno";
                    JOptionPane.showMessageDialog(this, porukaZaPrazno);
                    return;
                }
                JOptionPane.showMessageDialog(this, "Polja " + porukaZaPrazno + " nisu popunjena!!");
                return;

            }
            if (trajanjeUMin == 0) {
                JOptionPane.showMessageDialog(this, "Polje trajanje treninga nije u ispravnom formatu!!");
                return;
            }

            trening.setTrajanjeUMin(trajanjeUMin);
            trening.setTrener(trener);

            ClientController.getInstance().updateTrening(trening);

            FormPretraziTreninge fpt = (FormPretraziTreninge) getParent();
            fpt.refreshForm();

            JOptionPane.showMessageDialog(this, "Sistem je zapamtio trening");

            this.dispose();

        } catch (Exception ex) {
            if (ex instanceof IOException) {
                JOptionPane.showMessageDialog(this, "GRESKA,POKUSAJTE KASNIJE!!!!!");
                System.exit(0);

            }
            JOptionPane.showMessageDialog(this, ex.getMessage());

        }
    }//GEN-LAST:event_btnIzmeniActionPerformed

    private void btnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiActionPerformed

        int result = JOptionPane.showConfirmDialog(this, "Da li ste sigurni da zelite da obrisete trening",
                "Potvrda", JOptionPane.YES_NO_OPTION);

        if (result == JOptionPane.NO_OPTION) {
            return;
        }
        if (result == JOptionPane.YES_OPTION) {
            try {
                ClientController.getInstance().deleteTrening(trening);
                JOptionPane.showMessageDialog(this, "Sistem je obrisao podatke o treningu");
                FormPretraziTreninge fpt = (FormPretraziTreninge) getParent();
                fpt.refreshForm();
                this.dispose();

            } catch (Exception ex) {
                if (ex instanceof IOException) {
                    JOptionPane.showMessageDialog(this, "GRESKA,POKUSAJTE KASNIJE!!!!!");
                    System.exit(0);

                }
                JOptionPane.showMessageDialog(this, ex.getMessage());
                this.dispose();
            }
        }


    }//GEN-LAST:event_btnObrisiActionPerformed

    private void btnOtkaziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOtkaziActionPerformed

        this.dispose();
    }//GEN-LAST:event_btnOtkaziActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(TreningForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(TreningForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(TreningForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(TreningForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new TreningForm().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodaj;
    private javax.swing.JButton btnIzmeni;
    private javax.swing.JButton btnObrisi;
    private javax.swing.JButton btnOtkazi;
    private javax.swing.JComboBox<TipTreninga> cmbTip;
    private javax.swing.JComboBox<Trener> cmbTrener;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField txtCena;
    private javax.swing.JTextField txtDatum;
    private javax.swing.JTextField txtTrajanje;
    // End of variables declaration//GEN-END:variables

    private void prepareForm() {

        switch (mode) {

            case MyConstantsTrening.DODAJ_TRENING:
                btnIzmeni.setVisible(false);
                btnObrisi.setVisible(false);
                setLocationRelativeTo(null);
                break;
            case MyConstantsTrening.IZMENI_TRENING:
                btnDodaj.setVisible(false);
                btnObrisi.setVisible(false);
                txtCena.setEnabled(false);
                txtDatum.setEnabled(false);
                cmbTip.setEnabled(false);
                setLocationRelativeTo(null);
                break;
            case MyConstantsTrening.OBRISI_TRENING:
                cmbTip.setEnabled(false);
                cmbTrener.setEnabled(false);
                txtCena.setEnabled(false);
                txtDatum.setEnabled(false);
                txtTrajanje.setEnabled(false);
                btnDodaj.setVisible(false);
                btnIzmeni.setVisible(false);
                setLocationRelativeTo(null);
                break;

        }
    }

    private void popuniComboBoxTip() throws Exception {

        List<TipTreninga> tipovi = ClientController.getInstance().getListTip();
        for (TipTreninga tipTreninga : tipovi) {
            cmbTip.addItem(tipTreninga);
        }
        cmbTip.setSelectedIndex(-1);

    }

    private void popuniComboBoxTrener() throws Exception {

        List<Trener> treneri = ClientController.getInstance().getListTrener();
        for (Trener trener : treneri) {
            cmbTrener.addItem(trener);

        }

        cmbTrener.setSelectedIndex(-1);

    }

    private java.sql.Date validateDatum(String datumStr) {

        Date datum;
        SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
        try {
            datum = sdf.parse(datumStr);
        } catch (ParseException pe) {
            return null;
        }
        if (datum.after(new Date()) || datumStr.length() != sdf.format(datum).length()) {
            return null;
        }
        java.sql.Date datumSql = new java.sql.Date(datum.getTime());
        return datumSql;
    }

    private int validateCena(String cenaStr) {

        int cena = 0;
        try {
            cena = Integer.parseInt(cenaStr);
        } catch (NumberFormatException nfe) {
            return 0;
        }
        if (cena <= 0) {
            return 0;
        }
        return cena;
    }

    private int validateTrajanje(String trajanjeStr) {

        int trajanje = 0;
        try {
            trajanje = Integer.parseInt(trajanjeStr);
        } catch (NumberFormatException nfe) {
            return 0;
        }
        if (trajanje <= 0 || trajanje > 120) {
            return 0;
        }
        return trajanje;
    }

}
